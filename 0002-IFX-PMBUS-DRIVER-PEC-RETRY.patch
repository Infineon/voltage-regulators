From fe9fa8f31f22b239d3226a6406f3c30766990791 Mon Sep 17 00:00:00 2001
From: Ashish Yadav <ashish.yadav@infineon.com>
Date: Sat, 29 Mar 2025 10:36:13 +0530
Subject: [PATCH] IFX PMBUS DRIVER: PEC RETRY
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

1.In case of PMBUS read Failure due to PEC or NACK,
            retry the Bus read three more times.
2.In case the I2C adapter not support few functionality, show warning.

Signed-off-by: Ashish Yadav <ashish.yadav@infineon.com>
---
 drivers/hwmon/pmbus/tda38740.c | 42 ++++++++++++++++++++++++++--------
 1 file changed, 33 insertions(+), 9 deletions(-)

diff --git a/drivers/hwmon/pmbus/tda38740.c b/drivers/hwmon/pmbus/tda38740.c
index c8d304fa0..c0d51ee19 100644
--- a/drivers/hwmon/pmbus/tda38740.c
+++ b/drivers/hwmon/pmbus/tda38740.c
@@ -14,6 +14,7 @@
 #include <linux/module.h>
 #include <linux/mutex.h>
 #include <linux/regulator/driver.h>
+#include <linux/delay.h>
 #include "pmbus.h"
 
 #define TDA38725_IC_DEVICE_ID	"\x92"
@@ -23,6 +24,7 @@
 #define XDPE1A2G5B_IC_DEVICE_ID	"\x01\x9E"
 #define XDPE19284C_IC_DEVICE_ID	"\x02\x98"
 #define XDPE192C4B_IC_DEVICE_ID	"\x01\x99"
+#define IFX_RETRY_BUS_READ	4
 
 static const struct i2c_device_id tda38740_id[];
 
@@ -50,23 +52,43 @@ static int tda38740_read_word_data(struct i2c_client *client, int page,
 	const struct pmbus_driver_info *info = pmbus_get_driver_info(client);
 	const struct tda38740_data *data = to_tda38740_data(info);
 	int ret = 0;
+	int retry = 0;
 
 	/* Virtual PMBUS Command not supported */
 	if (reg >= PMBUS_VIRT_BASE) {
 		ret = -ENXIO;
 		return ret;
 	}
+
+	do {
+		ret = pmbus_read_word_data(client, page, phase, reg);
+		if (ret == -EBADMSG || ret == -ENXIO) {
+			/* PEC Error or NACK: try again */
+			retry++;
+			/* Sleep for an approximate time */
+			usleep_range(25, 50);
+			continue;
+		} else {
+			break;
+		}
+
+	} while (retry < IFX_RETRY_BUS_READ);
+
+	if (ret < 0) {
+		pr_warn("PMBUS READ ERROR:%d\n", ret);
+		return ret;
+	}
+
 	switch (reg) {
 	case PMBUS_READ_VOUT:
-		ret = pmbus_read_word_data(client, page, phase, reg);
 		pr_info("READ_VOUT Value:%d %d %d\n", ret, data->vout_multiplier[0],
 					data->vout_multiplier[1]);
 		ret = ((ret * data->vout_multiplier[0])/data->vout_multiplier[1]);
 		break;
 	default:
-		ret = pmbus_read_word_data(client, page, phase, reg);
 		break;
 	}
+
 	return ret;
 }
 
@@ -263,10 +285,12 @@ static int tda38740_probe(struct i2c_client *client)
 
 	/* FUNC for I2C SMBUS */
 	if (!i2c_check_functionality(client->adapter,
-			I2C_FUNC_SMBUS_READ_BYTE_DATA |
-			I2C_FUNC_SMBUS_READ_WORD_DATA |
-			I2C_FUNC_SMBUS_BLOCK_DATA))
-		return -ENODEV;
+			I2C_FUNC_SMBUS_BYTE |
+			I2C_FUNC_SMBUS_BYTE_DATA |
+			I2C_FUNC_SMBUS_WORD_DATA |
+			I2C_FUNC_SMBUS_BLOCK_DATA |
+			I2C_FUNC_SMBUS_PEC))
+		pr_warn("One of the required Func not supported by I2C adapter.\n");
 
 	chip_id = tda38740_get_device_id(client);
 	if (chip_id < 0)
@@ -290,13 +314,13 @@ static int tda38740_probe(struct i2c_client *client)
 
 	if (!of_property_read_u32_array(client->dev.of_node, "vout_multiplier",
 				data->vout_multiplier, ARRAY_SIZE(data->vout_multiplier))) {
-		pr_info("vout_multipplier from Device Tree:%d %d\n",
+		pr_info("vout_multiplier from Device Tree:%d %d\n",
 				data->vout_multiplier[0], data->vout_multiplier[1]);
 	} else {
-		pr_info("vout_multipplier not available from Device Tree");
+		pr_info("vout_multiplier not available from Device Tree");
 		data->vout_multiplier[0] = 0x01;
 		data->vout_multiplier[1] = 0x01;
-		pr_info("vout_multipplier default value:%d %d\n",
+		pr_info("vout_multiplier default value:%d %d\n",
 				data->vout_multiplier[0], data->vout_multiplier[1]);
 	}
 
-- 
2.39.5

