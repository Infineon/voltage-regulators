From c93fcfd51494732b7169dc78e7e221d1abaf09d7 Mon Sep 17 00:00:00 2001
From: Ashish Yadav <ashish.yadav@infineon.com>
Date: Tue, 17 Dec 2024 16:20:12 +0530
Subject: [PATCH] PMBUS DRIVER: Support for Infineon Devices

PMBUS Driver support for Infineon devices which includes:
 1. Integrated-POL-Voltage-Regulators: TDA38725/40
 2. Digital-Multiphase-Controllers: XDPE1A2G5B/19284C/192C4B

Signed-off-by: Ashish Yadav <ashish.yadav@infineon.com>
---
 drivers/hwmon/pmbus/Kconfig    |  16 ++
 drivers/hwmon/pmbus/Makefile   |   1 +
 drivers/hwmon/pmbus/tda38740.c | 349 +++++++++++++++++++++++++++++++++
 3 files changed, 366 insertions(+)
 create mode 100644 drivers/hwmon/pmbus/tda38740.c

diff --git a/drivers/hwmon/pmbus/Kconfig b/drivers/hwmon/pmbus/Kconfig
index b4e93bd58..9be265f13 100644
--- a/drivers/hwmon/pmbus/Kconfig
+++ b/drivers/hwmon/pmbus/Kconfig
@@ -427,6 +427,22 @@ config SENSORS_TDA38640_REGULATOR
 	  If you say yes here you get regulator support for Infineon
 	  TDA38640 as regulator.
 
+config SENSORS_TDA38740
+	tristate "Infineon TDA38740"
+	help
+	  If you say yes here you get hardware monitoring support for Infineon
+	  TDA38740/25 and XDPE1A2G5B/19284C/192C4B.
+
+	  This driver can also be built as a module. If so, the module will
+	  be called tda38740.
+
+config SENSORS_TDA38740_REGULATOR
+	bool "Regulator support for TDA38740 and compatibles"
+	depends on SENSORS_TDA38740 && REGULATOR
+	help
+	  If you say yes here you get regulator support for Infineon
+	  TDA38740/25 as regulator.
+
 config SENSORS_TPS40422
 	tristate "TI TPS40422"
 	help
diff --git a/drivers/hwmon/pmbus/Makefile b/drivers/hwmon/pmbus/Makefile
index 84ee960a6..06ca002ec 100644
--- a/drivers/hwmon/pmbus/Makefile
+++ b/drivers/hwmon/pmbus/Makefile
@@ -42,6 +42,7 @@ obj-$(CONFIG_SENSORS_PXE1610)	+= pxe1610.o
 obj-$(CONFIG_SENSORS_Q54SJ108A2)	+= q54sj108a2.o
 obj-$(CONFIG_SENSORS_STPDDC60)	+= stpddc60.o
 obj-$(CONFIG_SENSORS_TDA38640)	+= tda38640.o
+obj-$(CONFIG_SENSORS_TDA38740)	+= tda38740.o
 obj-$(CONFIG_SENSORS_TPS40422)	+= tps40422.o
 obj-$(CONFIG_SENSORS_TPS53679)	+= tps53679.o
 obj-$(CONFIG_SENSORS_TPS546D24)	+= tps546d24.o
diff --git a/drivers/hwmon/pmbus/tda38740.c b/drivers/hwmon/pmbus/tda38740.c
new file mode 100644
index 000000000..0c1621953
--- /dev/null
+++ b/drivers/hwmon/pmbus/tda38740.c
@@ -0,0 +1,349 @@
+// SPDX-License-Identifier: GPL-2.0+
+/**
+ * Hardware monitoring driver for Infineon Integrated-pol-voltage-regulators or
+ *   Digital-Multiphase-Controllers
+ * Driver for TDA38725,TDA38725A,TDA38740,TDA38740A,XDPE1A2G5B,XDPE19284C,XDPE192C4B
+ *
+ * Copyright (c) 2024 Infineon Technologies
+ */
+
+#include <linux/err.h>
+#include <linux/i2c.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/mutex.h>
+#include <linux/regulator/driver.h>
+#include "pmbus.h"
+
+#define TDA38725_IC_DEVICE_ID	"\x92"
+#define TDA38725A_IC_DEVICE_ID	"\xA9"
+#define TDA38740_IC_DEVICE_ID	"\x84"
+#define TDA38740A_IC_DEVICE_ID	"\xA8"
+#define XDPE1A2G5B_IC_DEVICE_ID	"\x01\x9E"
+#define XDPE19284C_IC_DEVICE_ID	"\x02\x98"
+#define XDPE192C4B_IC_DEVICE_ID	"\x01\x99"
+
+static const struct i2c_device_id tda38740_id[];
+
+enum chips {
+	tda38725,
+	tda38725a,
+	tda38740,
+	tda38740a,
+	xdpe1a2g5b,
+	xdpe19284c,
+	xdpe192c4b
+};
+
+struct tda38740_data {
+	enum chips id;
+	struct pmbus_driver_info info;
+	u32 vout_multiplier[2];
+};
+
+#define to_tda38740_data(x)  container_of(x, struct tda38740_data, info)
+
+static int tda38740_read_word_data(struct i2c_client *client, int page,
+					int phase, int reg)
+{
+	const struct pmbus_driver_info *info = pmbus_get_driver_info(client);
+	const struct tda38740_data *data = to_tda38740_data(info);
+	int ret = 0;
+
+	/* Virtual PMBUS Command not supported */
+	if (reg >= PMBUS_VIRT_BASE) {
+		ret = -ENXIO;
+		return ret;
+	}
+	switch (reg) {
+	case PMBUS_READ_VOUT:
+		ret = pmbus_read_word_data(client, page, phase, reg);
+		pr_info("READ_VOUT Value:%d %d %d\n", ret, data->vout_multiplier[0],
+					data->vout_multiplier[1]);
+		ret = ((ret * data->vout_multiplier[0])/data->vout_multiplier[1]);
+		break;
+	default:
+		ret = pmbus_read_word_data(client, page, phase, reg);
+		break;
+	}
+	return ret;
+}
+
+static const struct regulator_desc __maybe_unused tda38740_reg_desc[] = {
+	PMBUS_REGULATOR("vout", 0),
+};
+
+static struct pmbus_driver_info tda38740_info[] = {
+	[tda38725] = {
+		.pages = 1,
+		.read_word_data = tda38740_read_word_data,
+		.format[PSC_VOLTAGE_IN] = linear,
+		.format[PSC_VOLTAGE_OUT] = linear,
+		.format[PSC_CURRENT_OUT] = linear,
+		.format[PSC_CURRENT_IN] = linear,
+		.format[PSC_POWER] = linear,
+		.format[PSC_TEMPERATURE] = linear,
+
+		.func[0] = PMBUS_HAVE_VIN | PMBUS_HAVE_STATUS_INPUT
+			| PMBUS_HAVE_TEMP | PMBUS_HAVE_STATUS_TEMP
+			| PMBUS_HAVE_IIN
+			| PMBUS_HAVE_VOUT | PMBUS_HAVE_STATUS_VOUT
+			| PMBUS_HAVE_IOUT | PMBUS_HAVE_STATUS_IOUT
+			| PMBUS_HAVE_POUT | PMBUS_HAVE_PIN,
+#if IS_ENABLED(CONFIG_SENSORS_TDA38740_REGULATOR)
+		.num_regulators = 1,
+		.reg_desc = tda38740_reg_desc,
+#endif
+	},
+	[tda38725a] = {
+		.pages = 1,
+		.read_word_data = tda38740_read_word_data,
+		.format[PSC_VOLTAGE_IN] = linear,
+		.format[PSC_VOLTAGE_OUT] = linear,
+		.format[PSC_CURRENT_OUT] = linear,
+		.format[PSC_CURRENT_IN] = linear,
+		.format[PSC_POWER] = linear,
+		.format[PSC_TEMPERATURE] = linear,
+
+		.func[0] = PMBUS_HAVE_VIN | PMBUS_HAVE_STATUS_INPUT
+			| PMBUS_HAVE_TEMP | PMBUS_HAVE_STATUS_TEMP
+			| PMBUS_HAVE_IIN
+			| PMBUS_HAVE_VOUT | PMBUS_HAVE_STATUS_VOUT
+			| PMBUS_HAVE_IOUT | PMBUS_HAVE_STATUS_IOUT
+			| PMBUS_HAVE_POUT | PMBUS_HAVE_PIN,
+#if IS_ENABLED(CONFIG_SENSORS_TDA38740_REGULATOR)
+		.num_regulators = 1,
+		.reg_desc = tda38740_reg_desc,
+#endif
+	},
+	[tda38740] = {
+		.pages = 1,
+		.read_word_data = tda38740_read_word_data,
+		.format[PSC_VOLTAGE_IN] = linear,
+		.format[PSC_VOLTAGE_OUT] = linear,
+		.format[PSC_CURRENT_OUT] = linear,
+		.format[PSC_CURRENT_IN] = linear,
+		.format[PSC_POWER] = linear,
+		.format[PSC_TEMPERATURE] = linear,
+
+		.func[0] = PMBUS_HAVE_VIN | PMBUS_HAVE_STATUS_INPUT
+			| PMBUS_HAVE_TEMP | PMBUS_HAVE_STATUS_TEMP
+			| PMBUS_HAVE_IIN
+			| PMBUS_HAVE_VOUT | PMBUS_HAVE_STATUS_VOUT
+			| PMBUS_HAVE_IOUT | PMBUS_HAVE_STATUS_IOUT
+			| PMBUS_HAVE_POUT | PMBUS_HAVE_PIN,
+#if IS_ENABLED(CONFIG_SENSORS_TDA38740_REGULATOR)
+		.num_regulators = 1,
+		.reg_desc = tda38740_reg_desc,
+#endif
+	},
+	[tda38740a] = {
+		.pages = 1,
+		.read_word_data = tda38740_read_word_data,
+		.format[PSC_VOLTAGE_IN] = linear,
+		.format[PSC_VOLTAGE_OUT] = linear,
+		.format[PSC_CURRENT_OUT] = linear,
+		.format[PSC_CURRENT_IN] = linear,
+		.format[PSC_POWER] = linear,
+		.format[PSC_TEMPERATURE] = linear,
+
+		.func[0] = PMBUS_HAVE_VIN | PMBUS_HAVE_STATUS_INPUT
+			| PMBUS_HAVE_TEMP | PMBUS_HAVE_STATUS_TEMP
+			| PMBUS_HAVE_IIN
+			| PMBUS_HAVE_VOUT | PMBUS_HAVE_STATUS_VOUT
+			| PMBUS_HAVE_IOUT | PMBUS_HAVE_STATUS_IOUT
+			| PMBUS_HAVE_POUT | PMBUS_HAVE_PIN,
+#if IS_ENABLED(CONFIG_SENSORS_TDA38740_REGULATOR)
+		.num_regulators = 1,
+		.reg_desc = tda38740_reg_desc,
+#endif
+	},
+	[xdpe1a2g5b] = {
+		.pages = 2,
+		.read_word_data = tda38740_read_word_data,
+		.format[PSC_VOLTAGE_IN] = linear,
+		.format[PSC_VOLTAGE_OUT] = linear,
+		.format[PSC_TEMPERATURE] = linear,
+		.format[PSC_CURRENT_IN] = linear,
+		.format[PSC_CURRENT_OUT] = linear,
+		.format[PSC_POWER] = linear,
+		.func[0] = PMBUS_HAVE_VIN | PMBUS_HAVE_VOUT | PMBUS_HAVE_STATUS_VOUT |
+			PMBUS_HAVE_IIN | PMBUS_HAVE_IOUT | PMBUS_HAVE_STATUS_IOUT |
+			PMBUS_HAVE_TEMP | PMBUS_HAVE_TEMP2 | PMBUS_HAVE_STATUS_TEMP |
+			PMBUS_HAVE_POUT | PMBUS_HAVE_PIN | PMBUS_HAVE_STATUS_INPUT,
+		.func[1] = PMBUS_HAVE_VIN | PMBUS_HAVE_VOUT | PMBUS_HAVE_STATUS_VOUT |
+			PMBUS_HAVE_IIN | PMBUS_HAVE_IOUT | PMBUS_HAVE_STATUS_IOUT |
+			PMBUS_HAVE_TEMP | PMBUS_HAVE_TEMP2 | PMBUS_HAVE_STATUS_TEMP |
+			PMBUS_HAVE_POUT | PMBUS_HAVE_PIN | PMBUS_HAVE_STATUS_INPUT,
+	},
+	[xdpe19284c] = {
+		.pages = 2,
+		.read_word_data = tda38740_read_word_data,
+		.format[PSC_VOLTAGE_IN] = linear,
+		.format[PSC_VOLTAGE_OUT] = linear,
+		.format[PSC_TEMPERATURE] = linear,
+		.format[PSC_CURRENT_IN] = linear,
+		.format[PSC_CURRENT_OUT] = linear,
+		.format[PSC_POWER] = linear,
+		.func[0] = PMBUS_HAVE_VIN | PMBUS_HAVE_VOUT | PMBUS_HAVE_STATUS_VOUT |
+			PMBUS_HAVE_IIN | PMBUS_HAVE_IOUT | PMBUS_HAVE_STATUS_IOUT |
+			PMBUS_HAVE_TEMP | PMBUS_HAVE_TEMP2 | PMBUS_HAVE_STATUS_TEMP |
+			PMBUS_HAVE_POUT | PMBUS_HAVE_PIN | PMBUS_HAVE_STATUS_INPUT,
+		.func[1] = PMBUS_HAVE_VIN | PMBUS_HAVE_VOUT | PMBUS_HAVE_STATUS_VOUT |
+			PMBUS_HAVE_IIN | PMBUS_HAVE_IOUT | PMBUS_HAVE_STATUS_IOUT |
+			PMBUS_HAVE_TEMP | PMBUS_HAVE_TEMP2 | PMBUS_HAVE_STATUS_TEMP |
+			PMBUS_HAVE_POUT | PMBUS_HAVE_PIN | PMBUS_HAVE_STATUS_INPUT,
+	},
+	[xdpe192c4b] = {
+		.pages = 2,
+		.read_word_data = tda38740_read_word_data,
+		.format[PSC_VOLTAGE_IN] = linear,
+		.format[PSC_VOLTAGE_OUT] = linear,
+		.format[PSC_TEMPERATURE] = linear,
+		.format[PSC_CURRENT_IN] = linear,
+		.format[PSC_CURRENT_OUT] = linear,
+		.format[PSC_POWER] = linear,
+		.func[0] = PMBUS_HAVE_VIN | PMBUS_HAVE_VOUT | PMBUS_HAVE_STATUS_VOUT |
+			PMBUS_HAVE_IIN | PMBUS_HAVE_IOUT | PMBUS_HAVE_STATUS_IOUT |
+			PMBUS_HAVE_TEMP | PMBUS_HAVE_TEMP2 | PMBUS_HAVE_STATUS_TEMP |
+			PMBUS_HAVE_POUT | PMBUS_HAVE_PIN | PMBUS_HAVE_STATUS_INPUT,
+		.func[1] = PMBUS_HAVE_VIN | PMBUS_HAVE_VOUT | PMBUS_HAVE_STATUS_VOUT |
+			PMBUS_HAVE_IIN | PMBUS_HAVE_IOUT | PMBUS_HAVE_STATUS_IOUT |
+			PMBUS_HAVE_TEMP | PMBUS_HAVE_TEMP2 | PMBUS_HAVE_STATUS_TEMP |
+			PMBUS_HAVE_POUT | PMBUS_HAVE_PIN | PMBUS_HAVE_STATUS_INPUT,
+	},
+};
+
+static int tda38740_get_device_id(struct i2c_client *client)
+{
+	struct device *dev = &client->dev;
+	u8 device_id[I2C_SMBUS_BLOCK_MAX + 1];
+	enum chips id;
+	int status;
+
+	status = i2c_smbus_read_block_data(client, PMBUS_IC_DEVICE_ID, device_id);
+	if (status < 0) {
+		dev_err(dev, "Failed to read Device Id\n");
+		return status;
+	}
+
+	pr_info("PMBUS IC DEVICE_ID:%s\n", device_id);
+
+	if (!strncasecmp(TDA38725_IC_DEVICE_ID, device_id, strlen(device_id))) {
+		id = tda38725;
+	} else if (!strncasecmp(TDA38725A_IC_DEVICE_ID, device_id, strlen(device_id))) {
+		id = tda38725a;
+	} else if (!strncasecmp(TDA38740_IC_DEVICE_ID, device_id, strlen(device_id))) {
+		id = tda38740;
+	} else if (!strncasecmp(TDA38740A_IC_DEVICE_ID, device_id, strlen(device_id))) {
+		id = tda38740a;
+	} else if (!strncasecmp(XDPE1A2G5B_IC_DEVICE_ID, device_id, strlen(device_id))) {
+		id = xdpe1a2g5b;
+	} else if (!strncasecmp(XDPE19284C_IC_DEVICE_ID, device_id, strlen(device_id))) {
+		id = xdpe19284c;
+	} else if (!strncasecmp(XDPE192C4B_IC_DEVICE_ID, device_id, strlen(device_id))) {
+		id = xdpe192c4b;
+	} else {
+		dev_err(&client->dev, "Unsupported device\n");
+		return -ENODEV;
+	}
+
+	return id;
+}
+
+static int tda38740_probe(struct i2c_client *client)
+{
+	struct device *dev = &client->dev;
+	struct tda38740_data *data;
+	enum chips id;
+	int chip_id;
+
+	pr_info("Inside %s\n", __func__);
+
+	/* FUNC for I2C SMBUS */
+	if (!i2c_check_functionality(client->adapter,
+			I2C_FUNC_SMBUS_READ_BYTE_DATA |
+			I2C_FUNC_SMBUS_READ_WORD_DATA |
+			I2C_FUNC_SMBUS_BLOCK_DATA))
+		return -ENODEV;
+
+	chip_id = tda38740_get_device_id(client);
+	if (chip_id < 0)
+		return chip_id;
+
+	if (dev->of_node)
+		id = (uintptr_t)of_device_get_match_data(dev);
+	else
+		id = i2c_match_id(tda38740_id, client)->driver_data;
+
+	if (chip_id != id)
+		dev_warn(&client->dev, "Device mismatch: %d %d\n", id, chip_id);
+	else
+		pr_info("Device Match %d %d\n", id, chip_id);
+
+	data = devm_kzalloc(dev, sizeof(*data), GFP_KERNEL);
+	if (!data)
+		return -ENOMEM;
+	data->id = chip_id;
+	memcpy(&data->info, &tda38740_info[chip_id], sizeof(data->info));
+
+	if (!of_property_read_u32_array(client->dev.of_node, "vout_multiplier",
+				data->vout_multiplier, ARRAY_SIZE(data->vout_multiplier))) {
+		pr_info("vout_multipplier from Device Tree:%d %d\n",
+				data->vout_multiplier[0], data->vout_multiplier[1]);
+	} else {
+		pr_info("vout_multipplier not available from Device Tree");
+		data->vout_multiplier[0] = 0x01;
+		data->vout_multiplier[1] = 0x01;
+		pr_info("vout_multipplier default value:%d %d\n",
+				data->vout_multiplier[0], data->vout_multiplier[1]);
+	}
+
+	return pmbus_do_probe(client, &data->info);
+}
+
+static const struct i2c_device_id tda38740_id[] = {
+	{"tda38725",   tda38725},
+	{"tda38725a",  tda38725a},
+	{"tda38740",   tda38740},
+	{"tda38740a",  tda38740a},
+	{"xdpe1a2g5b", xdpe1a2g5b},
+	{"xdpe19284c", xdpe19284c},
+	{"xdpe192c4b", xdpe192c4b},
+	{}
+};
+
+MODULE_DEVICE_TABLE(i2c, tda38740_id);
+
+static const struct of_device_id __maybe_unused tda38740_of_match[] = {
+	{.compatible = "infineon,tda38725",  .data = (void *)tda38725  },
+	{.compatible = "infineon,tda38725a", .data = (void *)tda38725a },
+	{.compatible = "infineon,tda38740",  .data = (void *)tda38740  },
+	{.compatible = "infineon,tda38740a", .data = (void *)tda38740a },
+	{.compatible = "infineon,xdpe1a2g5b", .data = (void *)xdpe1a2g5b},
+	{.compatible = "infineon,xdpe19284c", .data = (void *)xdpe19284c},
+	{.compatible = "infineon,xdpe192c4b", .data = (void *)xdpe192c4b},
+	{ }
+};
+
+MODULE_DEVICE_TABLE(of, tda38740_of_match);
+
+/**
+ *  This is the driver that will be inserted
+ */
+static struct i2c_driver tda38740_driver = {
+	.driver = {
+		.name = "tda38740",
+		.of_match_table = of_match_ptr(tda38740_of_match),
+	},
+	.probe = tda38740_probe,
+	.id_table = tda38740_id,
+};
+
+module_i2c_driver(tda38740_driver);
+
+MODULE_AUTHOR("Ashish Yadav <Ashish.Yadav@infineon.com>");
+MODULE_DESCRIPTION("PMBus driver for Infineon IPOL/DMC");
+MODULE_LICENSE("GPL");
+MODULE_IMPORT_NS(PMBUS);
-- 
2.39.5

