From 1e3cf9195ea5c5b3cbfeacfaca57d140c6712561 Mon Sep 17 00:00:00 2001
From: ASHISH <Ashish.Yadav@infineon.com>
Date: Mon, 30 Sep 2024 14:42:45 +0530
Subject: [PATCH] TDA68740 Driver added in Linux Kernel. Signed-off-by: Ashish
 Yadav <ashish.yadav@infineon.com>

---
 drivers/hwmon/pmbus/Kconfig    |  16 ++++
 drivers/hwmon/pmbus/Makefile   |   1 +
 drivers/hwmon/pmbus/tda38740.c | 129 +++++++++++++++++++++++++++++++++
 3 files changed, 146 insertions(+)
 create mode 100644 drivers/hwmon/pmbus/tda38740.c

diff --git a/drivers/hwmon/pmbus/Kconfig b/drivers/hwmon/pmbus/Kconfig
index b4e93bd58..4807f2f8f 100644
--- a/drivers/hwmon/pmbus/Kconfig
+++ b/drivers/hwmon/pmbus/Kconfig
@@ -427,6 +427,22 @@ config SENSORS_TDA38640_REGULATOR
 	  If you say yes here you get regulator support for Infineon
 	  TDA38640 as regulator.
 
+config SENSORS_TDA38740
+	tristate "Infineon TDA38740"
+	help
+	  If you say yes here you get hardware monitoring support for Infineon
+	  TDA38740/25.
+
+	  This driver can also be built as a module. If so, the module will
+	  be called tda38740.
+
+config SENSORS_TDA38740_REGULATOR
+	bool "Regulator support for TDA38740 and compatibles"
+	depends on SENSORS_TDA38740 && REGULATOR
+	help
+	  If you say yes here you get regulator support for Infineon
+	  TDA38740/25 as regulator.
+
 config SENSORS_TPS40422
 	tristate "TI TPS40422"
 	help
diff --git a/drivers/hwmon/pmbus/Makefile b/drivers/hwmon/pmbus/Makefile
index 84ee960a6..06ca002ec 100644
--- a/drivers/hwmon/pmbus/Makefile
+++ b/drivers/hwmon/pmbus/Makefile
@@ -42,6 +42,7 @@ obj-$(CONFIG_SENSORS_PXE1610)	+= pxe1610.o
 obj-$(CONFIG_SENSORS_Q54SJ108A2)	+= q54sj108a2.o
 obj-$(CONFIG_SENSORS_STPDDC60)	+= stpddc60.o
 obj-$(CONFIG_SENSORS_TDA38640)	+= tda38640.o
+obj-$(CONFIG_SENSORS_TDA38740)	+= tda38740.o
 obj-$(CONFIG_SENSORS_TPS40422)	+= tps40422.o
 obj-$(CONFIG_SENSORS_TPS53679)	+= tps53679.o
 obj-$(CONFIG_SENSORS_TPS546D24)	+= tps546d24.o
diff --git a/drivers/hwmon/pmbus/tda38740.c b/drivers/hwmon/pmbus/tda38740.c
new file mode 100644
index 000000000..6724c534e
--- /dev/null
+++ b/drivers/hwmon/pmbus/tda38740.c
@@ -0,0 +1,129 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Hardware monitoring driver for Infineon TDA38740/25
+ *
+ * Copyright (c) 2024 Infineon Technologies
+ *
+ */
+
+#include <linux/err.h>
+#include <linux/i2c.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/regulator/driver.h>
+#include "pmbus.h"
+
+struct tda38740_data {
+	struct pmbus_driver_info info;
+	/* Used to protect against parallel writes */
+	u32 vout_multiplier[2];
+};
+
+#define to_tda38740_data(x)  container_of(x, struct tda38740_data, info)
+
+static int tda38740_read_word_data(struct i2c_client *client, int page,
+					int phase, int reg)
+{
+	const struct pmbus_driver_info *info = pmbus_get_driver_info(client);
+	const struct tda38740_data *data = to_tda38740_data(info);
+	int ret = 0;
+
+	pr_info("read_word_data with PMBUS Regs/Command:0x%X\n", reg);
+
+	/* Virtual PMBUS Command not supported */
+	if (reg > 0xFF) {
+		ret = -ENODATA;
+		return ret;
+	}
+	switch (reg) {
+	case PMBUS_READ_VOUT:
+		ret = pmbus_read_word_data(client, page, phase, reg);
+		pr_info("READ_VOUT Value:%d %d %d\n", ret, data->vout_multiplier[0],
+				data->vout_multiplier[1]);
+		ret = ((ret * data->vout_multiplier[0])/data->vout_multiplier[1]);
+		break;
+	default:
+		ret = pmbus_read_word_data(client, page, phase, reg);
+		break;
+	}
+	return ret;
+}
+
+static const struct regulator_desc __maybe_unused tda38740_reg_desc[] = {
+	PMBUS_REGULATOR("vout", 0),
+};
+
+static struct pmbus_driver_info tda38740_info = {
+	.pages = 1,
+	.read_word_data = tda38740_read_word_data,
+	.format[PSC_VOLTAGE_IN] = linear,
+	.format[PSC_VOLTAGE_OUT] = linear,
+	.format[PSC_CURRENT_OUT] = linear,
+	.format[PSC_CURRENT_IN] = linear,
+	.format[PSC_POWER] = linear,
+	.format[PSC_TEMPERATURE] = linear,
+
+	.func[0] = PMBUS_HAVE_VIN | PMBUS_HAVE_STATUS_INPUT
+		| PMBUS_HAVE_TEMP | PMBUS_HAVE_STATUS_TEMP
+		| PMBUS_HAVE_IIN
+		| PMBUS_HAVE_VOUT | PMBUS_HAVE_STATUS_VOUT
+		| PMBUS_HAVE_IOUT | PMBUS_HAVE_STATUS_IOUT
+		| PMBUS_HAVE_POUT | PMBUS_HAVE_PIN,
+#if IS_ENABLED(CONFIG_SENSORS_TDA38740_REGULATOR)
+	.num_regulators = 1,
+	.reg_desc = tda38740_reg_desc,
+#endif
+};
+
+
+static int tda38740_probe(struct i2c_client *client)
+{
+	struct device *dev = &client->dev;
+	struct tda38740_data *data;
+
+	data = devm_kzalloc(dev, sizeof(*data), GFP_KERNEL);
+	if (!data)
+		return -ENOMEM;
+
+	memcpy(&data->info, &tda38740_info, sizeof(data->info));
+	if (!of_property_read_u32_array(client->dev.of_node, "vout_multiplier",
+			data->vout_multiplier, ARRAY_SIZE(data->vout_multiplier)))
+		pr_info("read from DT vout_multipplier:%d %d\n", data->vout_multiplier[0],
+				data->vout_multiplier[1]);
+	else
+		pr_info("Not read from DT vout_multipplier:%d %d\n", data->vout_multiplier[0],
+				data->vout_multiplier[1]);
+	return pmbus_do_probe(client, &data->info);
+}
+
+static const struct i2c_device_id tda38740_id[] = {
+	{"tda38740", 0},
+	{}
+};
+MODULE_DEVICE_TABLE(i2c, tda38740_id);
+
+static const struct of_device_id __maybe_unused tda38740_of_match[] = {
+	{ .compatible = "infineon,tda38740"},
+	{ },
+};
+MODULE_DEVICE_TABLE(of, tda38740_of_match);
+
+/*
+ *  This is the driver that will be inserted
+ */
+static struct i2c_driver tda38740_driver = {
+	.driver = {
+		.name = "tda38740",
+		.of_match_table = of_match_ptr(tda38740_of_match),
+	},
+	.probe = tda38740_probe,
+	.id_table = tda38740_id,
+};
+
+module_i2c_driver(tda38740_driver);
+
+MODULE_AUTHOR("Ashish Yadav <Ashish.Yadav@infineon.com>");
+MODULE_DESCRIPTION("PMBus driver for Infineon TDA38740/25");
+MODULE_LICENSE("GPL");
+MODULE_IMPORT_NS(PMBUS);
-- 
2.45.1

